#include "Logger.h"

#include <iomanip>


const char* Logger::filename = "../errors.log";

const std::map<int, PCSTR> Logger::message_codes{
    { 0, "WM_NULL" },
    { 1, "WM_CREATE" },
    { 2, "WM_DESTROY" },
    { 3, "WM_MOVE" },
    { 5, "WM_SIZE" },
    { 6, "WM_ACTIVATE" },
    { 7, "WM_SETFOCUS" },
    { 8, "WM_KILLFOCUS" },
    { 10, "WM_ENABLE" },
    { 11, "WM_SETREDRAW" },
    { 12, "WM_SETTEXT" },
    { 13, "WM_GETTEXT" },
    { 14, "WM_GETTEXTLENGTH" },
    { 15, "WM_PAINT" },
    { 16, "WM_CLOSE" },
    { 17, "WM_QUERYENDSESSION" },
    { 19, "WM_QUERYOPEN" },
    { 22, "WM_ENDSESSION" },
    { 18, "WM_QUIT" },
    { 20, "WM_ERASEBKGND" },
    { 21, "WM_SYSCOLORCHANGE" },
    { 24, "WM_SHOWWINDOW" },
    { 26, "WM_SETTINGCHANGE" },
    { 27, "WM_DEVMODECHANGE" },
    { 28, "WM_ACTIVATEAPP" },
    { 29, "WM_FONTCHANGE" },
    { 30, "WM_TIMECHANGE" },
    { 31, "WM_CANCELMODE" },
    { 32, "WM_SETCURSOR" },
    { 33, "WM_MOUSEACTIVATE" },
    { 34, "WM_CHILDACTIVATE" },
    { 35, "WM_QUEUESYNC" },
    { 36, "WM_GETMINMAXINFO" },
    { 38, "WM_PAINTICON" },
    { 39, "WM_ICONERASEBKGND" },
    { 40, "WM_NEXTDLGCTL" },
    { 42, "WM_SPOOLERSTATUS" },
    { 43, "WM_DRAWITEM" },
    { 44, "WM_MEASUREITEM" },
    { 45, "WM_DELETEITEM" },
    { 46, "WM_VKEYTOITEM" },
    { 47, "WM_CHARTOITEM" },
    { 48, "WM_SETFONT" },
    { 49, "WM_GETFONT" },
    { 50, "WM_SETHOTKEY" },
    { 51, "WM_GETHOTKEY" },
    { 55, "WM_QUERYDRAGICON" },
    { 57, "WM_COMPAREITEM" },
    { 61, "WM_GETOBJECT" },
    { 65, "WM_COMPACTING" },
    { 68, "WM_COMMNOTIFY" },
    { 70, "WM_WINDOWPOSCHANGING" },
    { 71, "WM_WINDOWPOSCHANGED" },
    { 72, "WM_POWER" },
    { 74, "WM_COPYDATA" },
    { 75, "WM_CANCELJOURNAL" },
    { 78, "WM_NOTIFY" },
    { 80, "WM_INPUTLANGCHANGEREQUEST" },
    { 81, "WM_INPUTLANGCHANGE" },
    { 82, "WM_TCARD" },
    { 83, "WM_HELP" },
    { 84, "WM_USERCHANGED" },
    { 85, "WM_NOTIFYFORMAT" },
    { 123, "WM_CONTEXTMENU" },
    { 124, "WM_STYLECHANGING" },
    { 125, "WM_STYLECHANGED" },
    { 126, "WM_DISPLAYCHANGE" },
    { 127, "WM_GETICON" },
    { 128, "WM_SETICON" },
    { 129, "WM_NCCREATE" },
    { 130, "WM_NCDESTROY" },
    { 131, "WM_NCCALCSIZE" },
    { 132, "WM_NCHITTEST" },
    { 133, "WM_NCPAINT" },
    { 134, "WM_NCACTIVATE" },
    { 135, "WM_GETDLGCODE" },
    { 136, "WM_SYNCPAINT" },
    { 160, "WM_NCMOUSEMOVE" },
    { 161, "WM_NCLBUTTONDOWN" },
    { 162, "WM_NCLBUTTONUP" },
    { 163, "WM_NCLBUTTONDBLCLK" },
    { 164, "WM_NCRBUTTONDOWN" },
    { 165, "WM_NCRBUTTONUP" },
    { 166, "WM_NCRBUTTONDBLCLK" },
    { 167, "WM_NCMBUTTONDOWN" },
    { 168, "WM_NCMBUTTONUP" },
    { 169, "WM_NCMBUTTONDBLCLK" },
    { 171, "WM_NCXBUTTONDOWN" },
    { 172, "WM_NCXBUTTONUP" },
    { 173, "WM_NCXBUTTONDBLCLK" },
    { 254, "WM_INPUT_DEVICE_CHANGE" },
    { 255, "WM_INPUT" },
    { 256, "WM_KEYDOWN" },
    { 257, "WM_KEYUP" },
    { 258, "WM_CHAR" },
    { 259, "WM_DEADCHAR" },
    { 260, "WM_SYSKEYDOWN" },
    { 261, "WM_SYSKEYUP" },
    { 262, "WM_SYSCHAR" },
    { 263, "WM_SYSDEADCHAR" },
    { 265, "WM_UNICHAR" },
    { 269, "WM_IME_STARTCOMPOSITION" },
    { 270, "WM_IME_ENDCOMPOSITION" },
    { 271, "WM_IME_COMPOSITION" },
    { 272, "WM_INITDIALOG" },
    { 273, "WM_COMMAND" },
    { 274, "WM_SYSCOMMAND" },
    { 275, "WM_TIMER" },
    { 276, "WM_HSCROLL" },
    { 277, "WM_VSCROLL" },
    { 278, "WM_INITMENU" },
    { 279, "WM_INITMENUPOPUP" },
    { 281, "WM_GESTURE" },
    { 282, "WM_GESTURENOTIFY" },
    { 287, "WM_MENUSELECT" },
    { 288, "WM_MENUCHAR" },
    { 289, "WM_ENTERIDLE" },
    { 290, "WM_MENURBUTTONUP" },
    { 291, "WM_MENUDRAG" },
    { 292, "WM_MENUGETOBJECT" },
    { 293, "WM_UNINITMENUPOPUP" },
    { 294, "WM_MENUCOMMAND" },
    { 295, "WM_CHANGEUISTATE" },
    { 296, "WM_UPDATEUISTATE" },
    { 297, "WM_QUERYUISTATE" },
    { 306, "WM_CTLCOLORMSGBOX" },
    { 307, "WM_CTLCOLOREDIT" },
    { 308, "WM_CTLCOLORLISTBOX" },
    { 309, "WM_CTLCOLORBTN" },
    { 310, "WM_CTLCOLORDLG" },
    { 311, "WM_CTLCOLORSCROLLBAR" },
    { 312, "WM_CTLCOLORSTATIC" },
    { 512, "WM_MOUSEMOVE" },
    { 513, "WM_LBUTTONDOWN" },
    { 514, "WM_LBUTTONUP" },
    { 515, "WM_LBUTTONDBLCLK" },
    { 516, "WM_RBUTTONDOWN" },
    { 517, "WM_RBUTTONUP" },
    { 518, "WM_RBUTTONDBLCLK" },
    { 519, "WM_MBUTTONDOWN" },
    { 520, "WM_MBUTTONUP" },
    { 521, "WM_MBUTTONDBLCLK" },
    { 522, "WM_MOUSEWHEEL" },
    { 523, "WM_XBUTTONDOWN" },
    { 524, "WM_XBUTTONUP" },
    { 525, "WM_XBUTTONDBLCLK" },
    { 526, "WM_MOUSEHWHEEL" },
    { 528, "WM_PARENTNOTIFY" },
    { 529, "WM_ENTERMENULOOP" },
    { 530, "WM_EXITMENULOOP" },
    { 531, "WM_NEXTMENU" },
    { 532, "WM_SIZING" },
    { 533, "WM_CAPTURECHANGED" },
    { 534, "WM_MOVING" },
    { 536, "WM_POWERBROADCAST" },
    { 537, "WM_DEVICECHANGE" },
    { 544, "WM_MDICREATE" },
    { 545, "WM_MDIDESTROY" },
    { 546, "WM_MDIACTIVATE" },
    { 547, "WM_MDIRESTORE" },
    { 548, "WM_MDINEXT" },
    { 549, "WM_MDIMAXIMIZE" },
    { 550, "WM_MDITILE" },
    { 551, "WM_MDICASCADE" },
    { 552, "WM_MDIICONARRANGE" },
    { 553, "WM_MDIGETACTIVE" },
    { 560, "WM_MDISETMENU" },
    { 561, "WM_ENTERSIZEMOVE" },
    { 562, "WM_EXITSIZEMOVE" },
    { 563, "WM_DROPFILES" },
    { 564, "WM_MDIREFRESHMENU" },
    { 568, "WM_POINTERDEVICECHANGE" },
    { 569, "WM_POINTERDEVICEINRANGE" },
    { 570, "WM_POINTERDEVICEOUTOFRANGE" },
    { 576, "WM_TOUCH" },
    { 577, "WM_NCPOINTERUPDATE" },
    { 578, "WM_NCPOINTERDOWN" },
    { 579, "WM_NCPOINTERUP" },
    { 581, "WM_POINTERUPDATE" },
    { 582, "WM_POINTERDOWN" },
    { 583, "WM_POINTERUP" },
    { 585, "WM_POINTERENTER" },
    { 586, "WM_POINTERLEAVE" },
    { 587, "WM_POINTERACTIVATE" },
    { 588, "WM_POINTERCAPTURECHANGED" },
    { 589, "WM_TOUCHHITTESTING" },
    { 590, "WM_POINTERWHEEL" },
    { 591, "WM_POINTERHWHEEL" },
    { 593, "WM_POINTERROUTEDTO" },
    { 594, "WM_POINTERROUTEDAWAY" },
    { 595, "WM_POINTERROUTEDRELEASED" },
    { 641, "WM_IME_SETCONTEXT" },
    { 642, "WM_IME_NOTIFY" },
    { 643, "WM_IME_CONTROL" },
    { 644, "WM_IME_COMPOSITIONFULL" },
    { 645, "WM_IME_SELECT" },
    { 646, "WM_IME_CHAR" },
    { 648, "WM_IME_REQUEST" },
    { 656, "WM_IME_KEYDOWN" },
    { 657, "WM_IME_KEYUP" },
    { 673, "WM_MOUSEHOVER" },
    { 675, "WM_MOUSELEAVE" },
    { 672, "WM_NCMOUSEHOVER" },
    { 674, "WM_NCMOUSELEAVE" },
    { 689, "WM_WTSSESSION_CHANGE" },
    { 736, "WM_DPICHANGED" },
    { 738, "WM_DPICHANGED_BEFOREPARENT" },
    { 739, "WM_DPICHANGED_AFTERPARENT" },
    { 740, "WM_GETDPISCALEDSIZE" },
    { 768, "WM_CUT" },
    { 769, "WM_COPY" },
    { 770, "WM_PASTE" },
    { 771, "WM_CLEAR" },
    { 772, "WM_UNDO" },
    { 773, "WM_RENDERFORMAT" },
    { 774, "WM_RENDERALLFORMATS" },
    { 775, "WM_DESTROYCLIPBOARD" },
    { 776, "WM_DRAWCLIPBOARD" },
    { 777, "WM_PAINTCLIPBOARD" },
    { 778, "WM_VSCROLLCLIPBOARD" },
    { 779, "WM_SIZECLIPBOARD" },
    { 780, "WM_ASKCBFORMATNAME" },
    { 781, "WM_CHANGECBCHAIN" },
    { 782, "WM_HSCROLLCLIPBOARD" },
    { 783, "WM_QUERYNEWPALETTE" },
    { 784, "WM_PALETTEISCHANGING" },
    { 785, "WM_PALETTECHANGED" },
    { 786, "WM_HOTKEY" },
    { 791, "WM_PRINT" },
    { 792, "WM_PRINTCLIENT" },
    { 793, "WM_APPCOMMAND" },
    { 794, "WM_THEMECHANGED" },
    { 797, "WM_CLIPBOARDUPDATE" },
    { 798, "WM_DWMCOMPOSITIONCHANGED" },
    { 799, "WM_DWMNCRENDERINGCHANGED" },
    { 800, "WM_DWMCOLORIZATIONCOLORCHANGED" },
    { 801, "WM_DWMWINDOWMAXIMIZEDCHANGE" },
    { 803, "WM_DWMSENDICONICTHUMBNAIL" },
    { 806, "WM_DWMSENDICONICLIVEPREVIEWBITMAP" },
    { 831, "WM_GETTITLEBARINFOEX" },
    { 32768, "WM_APP" },
    { 1024, "WM_USER" }
};

Logger* Logger::instance = new Logger();

Logger* Logger::get_instance() {
    return instance;
}

void Logger::log_message(UINT message) {
    PCSTR message_text;
    try {
        message_text = message_codes.at(message);
    }
    catch (std::out_of_range e) {
        message_text = "unknown message";
    }

    file << std::setw(3) << message << ' ' << message_text << std::endl;
}

Logger& Logger::operator<< (wchar_t* val) {
    std::wstring wide(val);
#pragma warning(push)
#pragma warning(disable: 4244)
    std::string narrow(wide.begin(), wide.end());    // This is only safe for ASCII and that's okay with me
#pragma warning(pop)
    file << narrow;
    return *this;
}

Logger& Logger::operator<<(std::ostream& (*manip)(std::ostream&)) {
    file << manip;
    return *this;
}

Logger::Logger() {
    file = std::ofstream(filename);
}

Logger::~Logger() {
    file.close();
}
